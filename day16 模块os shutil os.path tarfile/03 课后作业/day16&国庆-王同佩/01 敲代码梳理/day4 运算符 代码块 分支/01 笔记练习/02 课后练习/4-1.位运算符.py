# ### (7)位运算符: & | ^ << >> ~

var1 = 19
var2 = 15

# & 按位与  (两个都是1,返回1,否则,返回0)
#    逻辑与  (两个都是True,返回True,否则,返回False)
res = var1 & var2
'''
000 ... 10011
000 ... 01111
000 ... 00011  ===>3
'''
print(res) #3

# | 按位或  (有一个是1,返回1,否则,返回0)
#    逻辑或or(有一个是True,返回True,否则,返回False)
res = var1 | var2
'''
000 ... 10011
000 ... 01111
000 ... 11111  ==>31
'''
print(res)  #31

# ^ 按位异或
'''两个值不相同,返回1,否则,返回0   '''
# 逻辑异或 (两个值不相同,返回True,否则,返回False)
res = var1 ^ var2
'''
000 ... 10011
000 ... 01111
000 ... 11100  ==>28
'''
print(res)  #28

# << 左移 (相当于乘法)
# 5乘以2的n次幂
res = 5 << 1 #10
res = 5 << 2 #20
res = 5 << 3 #40

'''
000 ... 000101  ==>5
000 ... 001010  ==>10  末位补零
000 ... 010100  ==>20 
000 ,,, 101000  ==>40
'''

# >> 右移 (相当于除法)
# 5地板除2的n次幂
res = 5 >> 1 # 2
res = 5 >> 2 # 1
res = 5 >> 3 # 0
'''
000 ... 0101
000 ,,, 0010  ==>2
000 ... 0001  ==>1
000 ... 0000  ==>0
'''

# ~ 按位非 (针对补码进行操作,按位取反,包含每一位,包含符号位)
#  -(n + 1)  结果
# res = ~22
res = ~19
print(res)  #-20

'''
# 正数  三码一致  符号位是0
原码: 000 ... 10011
反码: 000 ... 10011
补码: 000 ... 10011

补码:   000 ... 10011
按位非: 111 ... 01100

给你补码求原码
补码:111 ... 01100
反码:100 ... 10011
原码:100 ... 10100  ==> -20
'''

res = ~-19
# 负数  三码不一致  符号位是1
'''
原码: 100 ... 10011
反码: 111 ... 01100
补码: 111 ... 01101

补码:   111 ... 01101
按位非: 000 ... 10010  #正数  18

给你补码求反码  #正数  三码一致
补码:000 ... 10010
反码:000 ... 10010
原码:000 ... 10010
'''

'''
总结:
	个别运算符:
		运算符优先级最高的:  **幂运算(算数运算符) 
		运算符优先级最低的:  = 赋值运算符
		
	一元运算符 > 二元运算符(优先级)
		一元运算符: 同一时间,操作一个值   ~(按位非)  -(负号)
		二元运算符: 同一时间,操作2个值    + - * /等
		
	同一种类运算符:
		算数运算符: 乘除 > 加减
		逻辑运算符:  () > not > and(逻辑与) > or(逻辑或)
		位运算符:	 (<< >>) > &(按位与) > ^(按位异或) >|(按位或) 
		
	整体排序:
		算数运算符 > 位运算符 > 比较运算符 > 身份运算符 >成员运算符 > 逻辑运算符
		赋值运算符用来做收尾
'''

res = 5 + 5 << 6 // 3 is 40 and False
print(res) #False
'''
res = 10 << 2 is 40 and False
res = 40 is 40 and False
res = True and False  #取后者
res =  False
'''

# 用括号提升优先级
res = (5 + 5) << (6//3) is 40 and False
























