# ### 命名关键字形参
'''
1 def func(a,b,*,c,d)  跟在*号后面的c和d是命名关键字参数
2 def func(*args,e,**kwargs)
	加在*args和**kwargs之间的参数都是命名参数
	
命名关键字参数:在调用函数时,必须使用关键字实参的形式进行调用
'''
# 定义方法一
def func(a,b,*,c,d): #c和d是命名关键字形参,调用的时候
    # 必须用关键字实参,对命名关键字形参进行赋值
	print(a,b)
	print(c,d)
	
# func(1,2,3,4)   #报错
#TypeError: func() takes 2 positional arguments but 4 were given
func(1,2,c=3,d=4)

# 定义方法二
def func(*args,e,**kwargs):
	print(args)  #(1,2,3,4)  #把多余的普通参数打包成元组--形参
	print(e)	 # e=3   #e是命名关键字形参
	print(kwargs) # {'a':1,'b':2}  #把多余的关键字参数打包成字典--形参
func(1,2,3,4,a=1,b=2,e=3)

# ### 星号的使用
'''
* 和 ** 如果在函数的定义处使用
	* 把多余的普通实参打包成元组
	** 把多余的关键字实参打包成字典
	
* 和 ** 如果在函数的调用处使用
	* 把元组或列表进行解包
	** 把字典进行解包
'''

def func(a,b,*,c,d): 
	print(a,b)  #1 2
	print(c,d)  #3 4

tup = (1,2)
# 函数的调用处 *号用法  解包 (1,2) ==> 1,2
func(*tup,c=3,d=4) # func(1,2,c=3,d=4)

# 函数的调用处 **号用法   解包  {"c":3,"d":4}==>c=3,d=4
dic={"c":3,"d":4}
func(1,2,**dic)  #fuc(1,2,c=3,d=4)

# 综合写法
# 函数的调用处
tup = (1,2)
dic={"c":3,"d":4}
func(*tup,**dic)  #func(1,2,c=3,d=4)

# 定义成如下形式,可以收集所有的实参
def func(*args,**kwargs):
	pass

# 总结:当所有的形参都放在一起的时候,顺序:
# 普通形参--> 默认形参-->普通收集形参-->命名关键字形参-->关键字收集形参

def f1(a, b, c=0, *args, **kw):
    print('a =', a, 'b =', b, 'c =', c, 'args =', args, 'kw =', kw)

# 以上两个函数 打印结果
#(一)
f1(1, 2) # 		  a=1 b=2 c=0 args=() kw={}
f1(1, 2, c=3) # # a=1 b=2 c=3 args=() kw={}
f1(1, 2, 3, 'a', 'b') # a=1 b=2 c=3 args=('a','b') kw={}
f1(1, 2, 3, 'a', 'b', x=99) # # a=1 b=2 c=3 args=('a','b') kw={}
# 形参打包成元组  'a', 'b'  ==> ('a', 'b')  
# 形参打包成字典   x=99	  ==> {x:99}


def f2(a, b, c=0, *, d, **kw):
    print('a =', a, 'b =', b, 'c =', c, 'd =', d, 'kw =', kw)
f2(1, 2, d=99, ext=None)#a=1 b=2 c=0 d=99 kw={ext:None}
# d是命名关键字形参   在在调用函数时,必须使用关键字实参的形式进行调用  即 d=99
# 形参打包成字典   ext=None	  ==> {ext:None}
print('-----------------------1')

#(二)
def f1(a, b, c=0, *args, **kw):
    print('a =', a, 'b =', b, 'c =', c, 'args =', args, 'kw =', kw)

args = (1, 2, 3, 4)
kw = {'d': 99, 'x': '#'}
# f1(1,2,3,4,'d'=99,'x'='#')
# 实参:  (1,2,3,4)==> 1,2,3,4 将元组解包
# 实参:   {'d': 99, 'x': '#'} ==> d=99,x=# 将字典解包成 关键字实参
f1(*args, **kw)  # a=1 b=2 c=3 args=(4,),kw={'d':99,'x':'#'}
# 形参:  将多余的普通参数打包成元组--*args
#               4  ==> (4,)
# 形参:  将多余的关键字参数打包成字典--**kwargs
# 'd'=99,'x'='#'  ===>{'d':99,'x':'#'} 

#a = 1 b = 2 c = 3 args = (4,) kw = {'d': 99, 'x': '#'}
print('-----------------------2')


#(三)
# 步骤:先写实参--解包

def f2(a, b, c=0, *, d, **kw):
    print('a =', a, 'b =', b, 'c =', c, 'd =', d, 'kw =', kw)
	
myargs = (1, 2, 3)
mykw = {'d': 88, 'x': '#'}

# 第一步 实参 解包
# (1, 2, 3) ===> 1,2,3
#{'d': 88, 'x': '#'}  ===> 'd'=88,x'='#'  (实参解包:字典解包成关键字实参)

# f2(1,2,3,'d'=88,'x'='#')  #SyntaxError: keyword can't be an expression
f2(*myargs, **mykw)  # myargs是列表或元组   mykw是字典

# 第二步 形参  打包
# 'd'=88,x'='#'  ===> {'d':88,'x':'#'}  (形参打包:关键字形参打包成字典)

# a=1 b=2 c=3 d=88 kw={'x':'#'}
# d是命名关键字形参  已经用了 kw关键字收集参数只剩下一个键值对

print('-----------------------3')


#(四)
def f1(a, b, c=0, *args,d,**kw):
    print('a =', a, 'b =', b, 'c =', c, 'args =', args, 'kw =', kw)
    print(d)

f1(1,2,3, 'a', 'b',d=67, x=99,y=77)  #实参解包

#形参打包
# a=1 b=2 c=3 args=(a,b),kw={x:99,y:77}
# 67  而不是d=67  d是命令关键字形参

print('-----------------------4')



























